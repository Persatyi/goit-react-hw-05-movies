{"version":3,"file":"static/js/147.9c2069b7.chunk.js","mappings":"6PA0CA,EArCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,QAAcN,EACdM,EAAAA,EAAAA,eAAmB,WAAWC,KAAKH,KAClC,CAACJ,KAEF,wBACGG,EAAQK,OACPL,EAAQM,KAAI,YAA2D,IAAxDC,EAAuD,EAAvDA,GAAIC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACpD,OACE,2BACE,gBACEC,IACEH,EAAY,yCAC0BA,GAClCI,EAENC,IAAKN,EACLO,MAAM,WAER,uBAAIP,GAAQE,KACZ,uCAAeC,GAAa,oBAXrBJ,OAgBb,yBACE,sECAV,EA/BgB,WACd,IAAQV,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOiB,EAAP,KAAgBC,EAAhB,KAOA,OALAf,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,QAAcN,EACdM,EAAAA,EAAAA,kBAAsB,WAAWC,KAAKa,KACrC,CAACpB,KAGF,wBACGmB,EAAQX,OACPW,EAAQV,KAAI,YAA8C,IAA3CY,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,eAAgBb,EAAS,EAATA,GAC9C,OACE,2BACE,wBAAKW,GAAUE,EAAeZ,QAC9B,uBACGW,GAAW,oDAHPZ,OASb,yBACE,yEC3BV,EAA0B,kCCmF1B,EAtEyB,WACvB,IAAQc,GAAQC,EAAAA,EAAAA,MAARD,IACAxB,GAAYC,EAAAA,EAAAA,MAAZD,QACF0B,GAAUC,EAAAA,EAAAA,MAChB,GAA0BzB,EAAAA,EAAAA,UAAS,MAAnC,eAAO0B,EAAP,KAAcC,EAAd,MAEAxB,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,gBAAoBN,GAASO,KAAKsB,KACjC,CAAC7B,IAMJ,OACE,2BACG4B,IACC,iCACE,mBAAQE,UAAWC,EAAWC,KAAK,SAASC,QARnC,WACfP,EAAQQ,KAAK,MAOP,mBAGA,gBACEnB,IACEa,EAAMO,YAAN,yCACsCP,EAAMO,aACxCnB,EAENC,IAAKW,EAAMQ,eACXlB,MAAM,WAER,0BACGU,EAAMS,OACLT,EAAMjB,MACNiB,EAAMf,eACNe,EAAMQ,eAJV,IAMG,IAAIE,KAAKV,EAAMW,cAAgBX,EAAMY,gBAAgBC,cANxD,QASA,wCAAgBC,KAAKC,MAAOf,EAAMgB,aAAe,GAAM,KAAvD,QACA,sCACA,uBAAIhB,EAAMiB,YACV,oCACA,uBAAIjB,EAAMkB,OAAOrC,KAAI,qBAAGE,QAAiBoC,KAAK,WAGlD,mBACA,2BACE,yBACE,qDAEF,yBACE,SAAC,KAAD,CAASC,GAAE,UAAKxB,EAAL,SAAX,qBAEF,yBACE,SAAC,KAAD,CAASwB,GAAE,UAAKxB,EAAL,YAAX,2BAGJ,mBAEA,SAAC,KAAD,CAAOyB,KAAK,wBAAZ,UACE,SAAC,EAAD,OAEF,SAAC,KAAD,CAAOA,KAAK,2BAAZ,UACE,SAAC,EAAD,W","sources":["components/Views/Cast/Cast.jsx","components/Views/Reviews/Reviews.jsx","webpack://react-homework-template/./src/components/Views/MovieDetailsPage/MovieDetailsPage.module.css?397c","components/Views/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport api from 'components/services/ApiService';\r\nimport notFoundImg from 'img/not_found_ver.jpg';\r\n\r\nconst Cast = () => {\r\n  const { movieId } = useParams();\r\n  const [credits, setCredits] = useState([]);\r\n\r\n  useEffect(() => {\r\n    api.movieId = movieId;\r\n    api.fetchMovieCast('credits').then(setCredits);\r\n  }, [movieId]);\r\n  return (\r\n    <ul>\r\n      {credits.length ? (\r\n        credits.map(({ id, name, profile_path, original_name, character }) => {\r\n          return (\r\n            <li key={id}>\r\n              <img\r\n                src={\r\n                  profile_path\r\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\r\n                    : notFoundImg\r\n                }\r\n                alt={name}\r\n                width=\"200px\"\r\n              />\r\n              <p>{name || original_name}</p>\r\n              <p>Character: {character || 'not found...'}</p>\r\n            </li>\r\n          );\r\n        })\r\n      ) : (\r\n        <li>\r\n          <p>We don't have any cast for this movie</p>\r\n        </li>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Cast;\r\n","import { useParams } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport api from 'components/services/ApiService';\r\n\r\nconst Reviews = () => {\r\n  const { movieId } = useParams();\r\n  const [reviews, setReviews] = useState([]);\r\n\r\n  useEffect(() => {\r\n    api.movieId = movieId;\r\n    api.fetchMovieReviews('reviews').then(setReviews);\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <ul>\r\n      {reviews.length ? (\r\n        reviews.map(({ author, content, author_details, id }) => {\r\n          return (\r\n            <li key={id}>\r\n              <h3>{author || author_details.name}</h3>\r\n              <p>\r\n                {content || 'oops, there is no content from this author...'}\r\n              </p>\r\n            </li>\r\n          );\r\n        })\r\n      ) : (\r\n        <li>\r\n          <p>We don't have any reviews for this movie</p>\r\n        </li>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"backBtn\":\"MovieDetailsPage_backBtn__MYMio\"};","import {\r\n  NavLink,\r\n  Route,\r\n  useParams,\r\n  useRouteMatch,\r\n  useHistory,\r\n} from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport api from 'components/services/ApiService';\r\nimport Cast from 'components/Views/Cast/Cast';\r\nimport Reviews from 'components/Views/Reviews/Reviews';\r\nimport notFoundImg from 'img/not_found_ver.jpg';\r\nimport s from './MovieDetailsPage.module.css';\r\n\r\nconst MovieDetailsPage = () => {\r\n  const { url } = useRouteMatch();\r\n  const { movieId } = useParams();\r\n  const history = useHistory();\r\n  const [movie, setMovie] = useState(null);\r\n\r\n  useEffect(() => {\r\n    api.fetchMoviesById(movieId).then(setMovie);\r\n  }, [movieId]);\r\n\r\n  const prevPage = () => {\r\n    history.push('/');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {movie && (\r\n        <>\r\n          <button className={s.backBtn} type=\"button\" onClick={prevPage}>\r\n            Back\r\n          </button>\r\n          <img\r\n            src={\r\n              movie.poster_path\r\n                ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\r\n                : notFoundImg\r\n            }\r\n            alt={movie.original_title}\r\n            width=\"300px\"\r\n          />\r\n          <h2>\r\n            {movie.title ||\r\n              movie.name ||\r\n              movie.original_name ||\r\n              movie.original_title}\r\n            (\r\n            {new Date(movie.release_date || movie.first_air_date).getFullYear()}\r\n            )\r\n          </h2>\r\n          <p>User Score: {Math.round((movie.vote_average / 10) * 100)}%</p>\r\n          <h2>Overview</h2>\r\n          <p>{movie.overview}</p>\r\n          <h2>Genres</h2>\r\n          <p>{movie.genres.map(({ name }) => name).join(' ')}</p>\r\n        </>\r\n      )}\r\n      <hr />\r\n      <ul>\r\n        <li>\r\n          <p>Additional information</p>\r\n        </li>\r\n        <li>\r\n          <NavLink to={`${url}/cast`}>Cast</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to={`${url}/reviews`}>Reviews</NavLink>\r\n        </li>\r\n      </ul>\r\n      <hr />\r\n\r\n      <Route path=\"/movies/:movieId/cast\">\r\n        <Cast />\r\n      </Route>\r\n      <Route path=\"/movies/:movieId/reviews\">\r\n        <Reviews />\r\n      </Route>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDetailsPage;\r\n"],"names":["movieId","useParams","useState","credits","setCredits","useEffect","api","then","length","map","id","name","profile_path","original_name","character","src","notFoundImg","alt","width","reviews","setReviews","author","content","author_details","url","useRouteMatch","history","useHistory","movie","setMovie","className","s","type","onClick","push","poster_path","original_title","title","Date","release_date","first_air_date","getFullYear","Math","round","vote_average","overview","genres","join","to","path"],"sourceRoot":""}