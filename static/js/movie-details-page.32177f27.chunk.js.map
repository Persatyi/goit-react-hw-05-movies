{"version":3,"file":"static/js/movie-details-page.32177f27.chunk.js","mappings":"mPACA,EAA0B,kC,mBCWpBA,GAAOC,EAAAA,EAAAA,OAAK,kBAAM,iCAClBC,GAAUD,EAAAA,EAAAA,OAAK,kBACnB,gCA8EF,EA3EyB,WACvB,IAAQE,GAAQC,EAAAA,EAAAA,MAARD,IACAE,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAUC,EAAAA,EAAAA,MAChB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,gBAAoBR,GAASS,KAAKH,KACjC,CAACN,IAMJ,OACE,2BACGK,IACC,iCACE,mBAAQK,UAAWC,EAAWC,KAAK,SAASC,QARnC,WACfX,EAAQY,KAAK,MAOP,mBAGA,gBACEC,IACEV,EAAMW,YAAN,yCACsCX,EAAMW,aACxCC,EAENC,IAAKb,EAAMc,eACXC,MAAM,WAER,0BACGf,EAAMgB,OACLhB,EAAMiB,MACNjB,EAAMkB,eACNlB,EAAMc,eAJV,IAMG,IAAIK,KAAKnB,EAAMoB,cAAgBpB,EAAMqB,gBAAgBC,cANxD,QASA,wCAAgBC,KAAKC,MAAOxB,EAAMyB,aAAe,GAAM,KAAvD,QACA,sCACA,uBAAIzB,EAAM0B,YACV,oCACA,uBAAI1B,EAAM2B,OAAOC,KAAI,qBAAGX,QAAiBY,KAAK,WAGlD,mBACA,2BACE,yBACE,qDAEF,yBACE,SAAC,KAAD,CAASC,GAAE,UAAKrC,EAAL,SAAX,qBAEF,yBACE,SAAC,KAAD,CAASqC,GAAE,UAAKrC,EAAL,YAAX,2BAGJ,mBACA,UAAC,EAAAsC,SAAD,CACEC,UACE,SAAC,KAAD,CAAOC,OAAO,MAAMlB,MAAM,MAAMmB,MAAM,OAAOC,UAAU,YAF3D,WAKE,SAAC,KAAD,CAAOC,KAAK,wBAAZ,UACE,SAAC9C,EAAD,OAEF,SAAC,KAAD,CAAO8C,KAAK,2BAAZ,UACE,SAAC5C,EAAD,c","sources":["webpack://react-homework-template/./src/components/Views/MovieDetailsPage/MovieDetailsPage.module.css?397c","components/Views/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backBtn\":\"MovieDetailsPage_backBtn__Qk7Ac\"};","import {\n  NavLink,\n  Route,\n  useParams,\n  useRouteMatch,\n  useHistory,\n} from 'react-router-dom';\nimport { useEffect, useState, lazy, Suspense } from 'react';\nimport api from 'components/services/ApiService';\nimport notFoundImg from 'img/not_found_ver.jpg';\nimport s from './MovieDetailsPage.module.css';\nimport { Audio } from 'react-loader-spinner';\nconst Cast = lazy(() => import('../Cast/Cast' /* webpackChunkName: \"cast\" */));\nconst Reviews = lazy(() =>\n  import('../Reviews/Reviews' /* webpackChunkName: \"reviews\" */)\n);\n\nconst MovieDetailsPage = () => {\n  const { url } = useRouteMatch();\n  const { movieId } = useParams();\n  const history = useHistory();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    api.fetchMoviesById(movieId).then(setMovie);\n  }, [movieId]);\n\n  const prevPage = () => {\n    history.push('/');\n  };\n\n  return (\n    <div>\n      {movie && (\n        <>\n          <button className={s.backBtn} type=\"button\" onClick={prevPage}>\n            Back\n          </button>\n          <img\n            src={\n              movie.poster_path\n                ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                : notFoundImg\n            }\n            alt={movie.original_title}\n            width=\"300px\"\n          />\n          <h2>\n            {movie.title ||\n              movie.name ||\n              movie.original_name ||\n              movie.original_title}\n            (\n            {new Date(movie.release_date || movie.first_air_date).getFullYear()}\n            )\n          </h2>\n          <p>User Score: {Math.round((movie.vote_average / 10) * 100)}%</p>\n          <h2>Overview</h2>\n          <p>{movie.overview}</p>\n          <h2>Genres</h2>\n          <p>{movie.genres.map(({ name }) => name).join(' ')}</p>\n        </>\n      )}\n      <hr />\n      <ul>\n        <li>\n          <p>Additional information</p>\n        </li>\n        <li>\n          <NavLink to={`${url}/cast`}>Cast</NavLink>\n        </li>\n        <li>\n          <NavLink to={`${url}/reviews`}>Reviews</NavLink>\n        </li>\n      </ul>\n      <hr />\n      <Suspense\n        fallback={\n          <Audio height=\"100\" width=\"100\" color=\"grey\" ariaLabel=\"loading\" />\n        }\n      >\n        <Route path=\"/movies/:movieId/cast\">\n          <Cast />\n        </Route>\n        <Route path=\"/movies/:movieId/reviews\">\n          <Reviews />\n        </Route>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n"],"names":["Cast","lazy","Reviews","url","useRouteMatch","movieId","useParams","history","useHistory","useState","movie","setMovie","useEffect","api","then","className","s","type","onClick","push","src","poster_path","notFoundImg","alt","original_title","width","title","name","original_name","Date","release_date","first_air_date","getFullYear","Math","round","vote_average","overview","genres","map","join","to","Suspense","fallback","height","color","ariaLabel","path"],"sourceRoot":""}